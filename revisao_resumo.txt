INTRODUÇÃO 
DATABINDING
ANGULAR CLI
DIRETIVAS
SERVIÇOS
PIPES
ROTAS
FORMULARIOS

********************************************************************************************
                        ..::!! INTODUÇÃO !!::..
********************************************************************************************

	= aula 1 
	=========
		apresentação e overwiew

	= aula 2
	=========
		ambiente:
		
		via terminal:
			1 - instala o node na maquina
			2 - instala o angular cli - npm install -g@angular/cli	
			3 - instala o typescript - npm install -g typescript 
			4 - instala vs code

	= aula 3
	=========
		primeira aplicação
		
	aula 4
	=======
		typescript
		cria um arquivo .ts
		no terminal, da um tsc main.ts
		isso faz o angular compilar o arquivo
		depois um ovwerwiew de ts

	aula 5
	=======
		modulos
		
	aula 6
	=======
		templates
		
	aula 7
	=======
		Classes de serviços e injeções de dependencias
		
	aula 8
	========
		plugins p editres de texto
			
********************************************************************************************
                        ..::!! DATABINDING !!::..
********************************************************************************************
	
	aula 9
	========
		property dinding
		mandar infos do componente para o templates atarves de uma propriedade html
		<img src="endereco da imagem"
		<img [src]="variavel_que_recebe_endereco"
		uma propriedade recebe uma variavel

	aula 10
	========
		class e style binding
		sao maneiras de se trabalhar ocm o property binding

	= aula 11
	===========
		event binding - ()=
		um evento dispara um metodo
		
	= aula 12
	==========
		two away databinding
		a comunicação se da nos dois sentidos
		do template pro componente e do componente pro template
		lembrar user q ssetava o input
		e qd alteravamos o value, o input alterava o obj no componente

	= aula 13
	===========
		reutilização de componentes
		utilizar no comp B, infos do comp A
		ta explicado no vs code, mas da p fixar melhor
		
	= aula 14
	===========
		fazer um evento no componente A de uma meneira q o componete B possa capturar e tb possa desenvolver alguma logica em cima
		tb da p praticar mias
		
	= aula 15
	===========
		ciclo de vida dos componentes
		funçoes padrao que sao disparadas pelo angular
		onIniti, OnDestroy,...
		elas podem ser utilizadas p trabalhar alguma logica
		
	= aula 16
	===========	
		wiew child - acesso ao dom
		é pra qd criamos uma variavel no html, tipo, #variavel
		podermos trabalhar com ela no component
		@wiewChild ('variavelQueTaNoHtml') variavelUtilizadaNoComponent: qqTipo;
		tb da p praticar
	
********************************************************************************************
                        ..::!! ANGULAR CLI !!::..
********************************************************************************************	
	
	= aula 17
	==========
		criar projetos e ng serve com angular cli
		
	= aula 18
	===========	
		como criar componentes e classe de servico
	
	= aula 19
	===========
		pre processadores css
		qd criar o projeto ja avisa qual o pre processado q vai ser utilizado
			ng new nome-do-projeto --less
		
		tb da p pegar projetos ja existentes, q estao com css nativos e mudar p pre processadores
			ng set defaults.styleExt less
		
	= aula 20
	==========
		ng lint, ng test e ng e2e
		o que é cada arquivo desse
		
	= aula 21
	===========
		explica tudo q o angular cli cria qd criamos um projeto
		
	
	= aula 22
	==========
		gerando builds
		da p fixar melhor
	
	= aula 23
	==========
		instalação de bibliotecas externas
		bootstrap, jq, material, materialize, .....
		
********************************************************************************************
                        ..::!! DIRETIVAS !!::..
********************************************************************************************			
		
	= aula 24
	==========
		introdução a diretivas
	
	= aula 25
	==========
		ngIf
		
	= aula 26
	===========
		ng switch
		
	= aula 27
	==========
		ng for
		
	= aula 28
	===========
		<template> e uso do *
	
	= aula 29  
	===========
		diretiva ngClass
		
	= aula 30
	===========
		diretiva ng style

	= aula 31
	===========
		Operador ?

	= aula 32
	===========
		ng content
		
	= aula 33
	===========
		criando diretivas
		
	= aula 34
	===========
		hostListern
		hostbinder

		escutar eventos em elementos cm diretivas customizadas
	
	= aula 35
	===========
		diretivas de @input e property biding
		
	= aula 36
	==========
		diretivas estruturais
		modificam o template
		
********************************************************************************************
                        ..::!! SERVIÇOS !!::..
********************************************************************************************	
	
	= aula 37
	==========
		introdução á serviços
		
	= aula 38
	==========
		primeiro serviços
		
	= aula 39
	==========
		injeção de dependenia
		
	= aula 40
	===========
		single injectio e varias instancias
		dois componentes utilizam o mesmo servico
		
	= aula 41
	===========
		broadcast de eventos
		fazeer o componente A escutar um evento no componente B utilizando o serviço
		
		
	= aula 42
	==========
		injetar um serviço dentro do outro
		instanciar um serv dentro do outro na real
	
********************************************************************************************
                        ..::!! PIPES !!::..
********************************************************************************************	
		
		= aula 43
		===========
			introdução
			
		= aula 44
		==========
			criando um pipe
			ng g p nome-do-pipe
		
		= aula 45
		===========
			aplicando locale nos pipes
			nos projetos na real, mas ela apresenta isso com os pipes
			
		= aulas 46 e 47
		=================
			pipes puros e pipes impuros
			
		= aula 48
		==========
			pipe assincrono
		
********************************************************************************************
                        ..::!! ROTAS !!::..
********************************************************************************************		
	
	= aula 49
	==========
		introdução
		spa e como a rota faz isso
		
	= aulas 50 e 51
	=================
		rotas simples
		é a aula que ela faz as rotas num arquivo.ts e nao um .routing.ts
		
		passo a passo:
		
			1 - importar la em cima:
				Router 
				router module 
					Os dois sao do @angular/router
				
				ModuleWithProviders, é do angular core
				
				Os coponentes q vao ser roteados
		
			2 - Cria uma constante é do tipo router, e recebe um array de obejto com path e o componente que ele aponta
			
			3 - tres passos:
				cria uma segunda constante (segundaConstante) do tipo ModuleWithProviders 
				Essa const recebe um routerModule.forroot(Nome_da_constante_do_array_de_objetos)
				essa constante, segundaConstante é que é exportada, levando a constante do array como parametro
			
			4 - vai no modulo e importa o arquivo approuting la em cima  e coloca ele nos imports
			
			5 - vai no html e poae um <router-outlet>
			
			6 - No template, ao inves do href, coloca um routerlink="path_definido_na_rota"
	
	= aula 52
	==========	
		css na rota ativa - routerlinkactive
		
	= aula 53 e 54
	================
		extraindo parametros das rotas
		
		passo a passo:
			1 - poem o parametro no path da rota, usando dois pontos :
				path:'/cursos/:id'
			
			2 - no template:
				faz um property binding no router link p a propriedade recebe um array com a rota e o parametro
				[routerLink]="['rota', parametro]"
				[routerLink]="['curos', id]"
			
			3 - no componente, precisamos pegar os parametros que foram passados
				
				3.1 existe uma classe do angular 2 chamada de activateRoute
					injeta ela no construtor e importa la am cima
		
				3.2 - this.id = router.spashoot.params['id'] 
					o paremntro vem dentro do snapshot (paramas)
					
					qd coloco o id na mao, la na url funciona.
					mas qd clico no link nao rolar
					talvez tenha q escutar as mudanças na url

				3.3 - Escutando mudanças nos parâmetros de roteamento:
					se der um conosole log no this.route
					da p ver q ele tem um params, que é um behavorSubject
					esse behavor subject é do rxjs e significa que é um valor q pode mudar com o tempo, e o valor do parametro 
					aqui dentro vai mudando
					
					da p se inscrever e ficar escutando esse behavor subject
					
					this.route.params.subscribe(
						(params: any) => {
							this.id = params['id ']
						}
					)
			
	= aula 55
	===========
		rotas imperativas
		é qd da um redirect no componente
		this.router.navigate(['path da rota'])
		
	= aula 56
	===========
		definindo e extraindo parametros da url
		query parameters
		uma outra maneira de pegar os parametros
		
	= aula 57
	===========
		modulo de rota
		é a qula que ela leva do .ts pro .touting.ts
		
	= aula 58
	==========
		ela cria ma pasta curso detalhe, e cria um modulo de funcionalidade p ele
			
	= aula 59
	===========
		modulo de rota (.routing) de funcionalidade
		da p fixar melhor
	
	= aula 60
	===========
		rotas filhas
		da p fixar melhor
		
	= aula 61
	===========
		rotas filhas e criação das telas
		ver como aponta pras filhas, assim como ta só funcionam colocando os ids na mao, na url 
		
		precisamos escutar qd o usuario clica no outor bt
		
		actiate route e subscribe
		
		da pra revisar

	= aula 62
	===========
		lazy load
		carregamento por demanda
		
		quem "carrega" os componentes e templates sao os modulos
		para trabalhar com carregamento por demananda passamos isso para o routing
		é o routing e nao mais o modulo que carrega os componentes
		
		e para fazer isso existe um extenso passo a passo:
		
			
		
/api/questionarios/porta 3000		
		






























********************************************************************************************
                        ..::!! FECHAMENTO !!::..
********************************************************************************************

Novo projeto:
	via terminal:
		1 - instala o node na maquina
		2 - instala o angular cli - npm install -g@angular/cli	
		3 - instala o typescript - npm install -g typescript 
		4 - instala vs code
		
data binding
	ok
	property, event, twoaway
	reutilização de componentes
		utilizar no comp B, infos do comp A
	
	fixar
	output propriet - fazer um componente escutar eventos do outro
	ciclo de vida
	wiewchild
	
angular cli
	pre processadores css
		ng new nome-do-projeto --less
	builds de projetos
	

diretivas
	ok
	if, switch, for, *, <template> e ? (elvis)

	fixar
	ng class, ng style, ng content, criar diretivas, hostlistner e hostbinder, diretivas de @input e property biding
	
serviços
	ta ok
	injeção de dependenia
	
	single injectio e varias instancias
		dois componentes utilizam o mesmo servico
	
	broadcast de eventos
		fazeer o componente A escutar um evento no componente B utilizando o serviço
	
	injetar um serviço dentro do outro
		instanciar um serv dentro do outro na real

pipes
	é simples e ta ok
	locale, pipes puros, impuros e assincronos

rotas
	ta ok, e é mais recente
	
forms
	to fazendo

















