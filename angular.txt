===============================================================================
aula 01
=========

	apresentação
	
	componentes e templates
	data binding
	diretivas e serviços
	formularios
	roteamentos
	integração com servidor
	crud
	
	angular.io - documentação
	parceria google e microsoft
		google mantem, mas foi escrito em typescript(ms)
	
	open source
		github.com/angular
		
	overview
		compnente:
			é a view
			encapsula
				templates
				metadata - processamento de classes
				dado a ser mostrado na tela - databinding
				comportamento da view
				
			angular 2 é oriantado a componetes
				um componente pode ser divido em componetnte menores
					um componete de lista de posts pode ser dividido em varios posts, onde cada post é um componente	
					"quebrar" as coias em componentes faz com que fique ais facil de testar.

		Serviçoes
			Um componente pode se comunicar com o back end.
			qq linguagem. php, C#, c++,...
			o componete (front) pode falar com o back
			nao é boa pretica colocar regras de negocio nos componentes
			para isso existem os SERVIÇOS. São eles que fazem o meio campo entre p front e o back. É ali que ficam as regras de negocio
			Os servços tb podem ser injetados em outras classes, para isso se usa a INJEÇÃO DE DEPENDENCIAS do angular. Vai ter uma aula só p isso
			
		Router:
			Uma aplicação tem varias paginas
			o angular trabalha com o conceito de SPA - Single page aplication
			Uma pagina pode ter telas diferentes
			O router faz a navegação entre uma tela e outras
			
		Diretivas:
			Manipula o DOM
			os componentes tb manipula o dom, mas nao foram feitos p isso
			a diretiva sim.
		
	Repositorio do curso:
		github.com/loiane/curso-angular2
		Loiane.training
		



===============================================================================
aula 02
=========
	ambiente
	
	instalar o node
		tem q instalar pe nesse ponto é tipo grunt
		o angular trabalha com dependencias, e grunt com plugins
		
	no prompt/bash instalat o angular-cli
		provavelmente na pasta do projeto
		depois do angular-cli, é que chamamos as dependencias
		tem que ter um packdge json
		
	instalar typescript	
		depois de instalar o node
		npm install -g typescript 
		
		pq typescript e nao o js puto
			è possivel utilizar o ECMAscrpit2015, porem a maioria dos exemplos, a proria dpcumentação estão em typescrit
			o proprio angular foi escrito em typescript
	
	Instalar o angular@cli
		npm install -g@angular/cli	
			antenção, pq é barra no final, e nao hifem
			
		github.com/angular/angular-cli
		
		
	e tb vai precisar de editor de texto 
		sublime, notepad++, vs code,....
			vs code ja suporta typescripot (ts)
			sublime - tem plugins
			
			vs code	
				dar um scrool q tem as base, depois dos plugins
				https://code.visualstudio.com/docs?start=true
				
				https://code.visualstudio.com/docs/getstarted/introvideos 	 	
		
		
		
===============================================================================
aula 03
=========		
	primeiras aplicações
	no bash, dar um ng new nome-da-pasta
		o angular cria a pasta do projeto, com todos os componentes e todas as dependencias
		Sobre o nome da pasta:
			nao pode ter underline na frente, tem q ser uma letra
			tipo, _projeto01 ta errado, tem underline
		
		ela tem uma aula que explica o qq é cada arquivo que o angular cria 
			é aula 21

		vamos trabalhar em src/app 

		antes de inciar, vamos ver o que está sendo exibido no browser
			vai no bash, pasta q o angular criou, e da um ng serve
			assim o angular vai da um build no projeto e gera uma url pra acessar via browsar

		saida do dado do componente para a wiew se chama interpolação
			no componete tem um titlt = lorem
			na wiew tem um {{title}}
			Isso é uma interpolação

		criar novo componete:
			primeiro vai ser manualmente, para termos um passo a passo.
			mas tem como fazer via angular
			o passo a passo tb serve pra gente ser apresentado as boas praticas e patrodes de projeto do angular

			Manual, passo a passo:
				vai na pasta do projeto, em src/app cria uma nova pasta - primeiro-componente
				separado por hifen
				dentro da pasta cria um file
				meu-primeiro.component.ts
				dentro desse file:
					criamos a calsse primiroCompnent{}
					dai precisamos avisar o compilador q a classe é um componente
						@Component({})
						mas precismos importar a classe q permite usar o @component
						pra isso importa da biblioteca q o angular instalou no projeto (node modules)
						import {Component} from ´@angular/core´ 
						depois, precisamos passar os metadados, dentro do @component({
							metadados aqui
							selector e template
						})
						precisamos exportar a classe, para aplicação enxergar

				depois precisamos avisar a aplicação ad existencia dessa classe	
					no arquivo app.modules, no @moudules passamos a classe
					depois, la em cima, damos um import na classe.
					

			via bash, angular cli:
				ctrl+c p parar o ng serve
				ng g c nome do componente 
					onde a letra G é para gerar e a letra C é pra ser um componente 
					ng g c segundo-componente 

					o angular cra uma interface
						on init, e algumas coisas dentro da classe
						por enquanto isos nao vai ser preciso. Apagar. 

===============================================================================
aula 04
=========
	typescript
	cria uma pasta na pasta src/app
	dentro dessa pasta cria um file .ts
		criar codigos em js e comparar com ECMA e TS

		via bash, vai na pasta que foi criada, no caso aqui, é a pasta primeiro-typescript e da um tsc main.ts
		isso faz o ts compilar o arquivo 
		um arquivo .js é criado

		ela recomenda o site es6-features.org

		apresenta variaveis
		apresenta uma function norml
		apresenta uma arrow function, que é ECMA
			apaga apalavra function, fica o valor e uma seta
			numeros.map(valor =>)
			depois vem o que a function executa
			numeros.map(valor => {do sonthing;})
			quando o bloco de execução for só uma linha, nao precisa das chaves, nem do ponto e virgula dento delas, só o de fra do parenteses
			numeros.map(valor => do sonthing);
			tb nao precisa o retrn
			Para trabalhar com a ECMA precisa de um transpiler
				uns dos transpilers mais populares que existem é o babel
				mas o ts tem um transpiler nativo
				ele gera js nativo apartir do ECMA qd o ts compila
			com ECMA fica mais simples de declarr clasees, por exemplo.
				compila e o ts gera todo o codigo para a classe ter a sintaxe de js nativo

		ela explica pq o ts é melhor que o babel p transpilar
			1 - o babel ainda nao transpila decoratos, o ts ja
			2 - com ts temos como tipar as variaveis	
				o js nativo nao trabalha com tipos de dados
				tipo, criamos uma var numer = 4.
				com js nativo podemos escrever: numero = "lorem";
				um int estaria recebendo uma string
				de novo, com js nativo da. Ele nao trabalha com tipagem de dados.
				Mas com ts podemos tipar, e trabalhar com tipos e dados diferentes.
				Com babel tb nao da para trablahr com tipos de dados
		Ela recomenda olhar o curso de java basico, a parte de orientação aobjetos
			classes e atributos
			modificadores proivate 
			getters e setters 
			variaveis e metodos estaticos
			interfaces

===============================================================================
aula 05
=========
	Modulos
	qd agente cria um projeto com angular, ele ja cria um modulo. O app.modules
		esse é o modulo raiz da aplicação.
		ela apresenta o moudulo
			no final tem o export class
			depois da class, vem o decorator
				@alguma-coisa
				como é um decorator, tem q ter o import dele la no topo
				todos os decorators vem do @angular/core
			alem do decorator, tem outros Modulos  
				cada um tem uma função, e é importado de algum lugar
				nao necessariamente o @angular/core
					browser module - prepara a app p ser rodade em browser
					formsModule - ele é importante p databing e trabalhar com formularios
					http module - utilizado p fazer as requisições ajax
					Com o nivel de codigo q vamos trabalhar no inicio do curso, da p tirar o http module e o forms module, comentando as linhas
			Depois vem os metadados dentro do decorator
				declarations
					aqui declaramos toso os componentes, diretivas e pipes q vamos utilizar nesse modulo 
				imports:
					outros modulos que agente quer utilizar nesse modulo aqui
					por exemplo, se agente fizerm um import de algum modulo la em cima (tipo htpp), a gente precisa declarar o modulo aqui no metadados, atraves do import
				Providers
					é onde vao os serviços
					assim os serviços ficam disponiveis para os componentes declarados no modulo
				bootstrap
					existe apenas no mudolo raiz da app
					bootstrap á o componente que vai servisr de container para outros.
						o angular trabalha com SPA	
							single page aplication
						o botstrao aaponta qual é o componente "inicial", "principal" da aplicação
							é nesse componente q se configura as rotas 
							declara ou chama o menu da app 
			O angular trabalha com criação de modulos pq seficassemos declarando tudo nesse modulo 
				ele ficaria enorme
			os novos modulos sao chamados de features modules (modulos de funcinaliodades)
			para criar um modulo é via bash
			ng g m nome-do-modulo
			ng g m cursos
			
			depois ela apresenta as difrenças entre o modulo raiz e um feature modulo
				existem varas diferenças, mas oq importa é o CONMOM modules que o fetare modulo importa
				ele contem as diretivas e os pipes mais comuns
				Assim todas essas diretivas e pipes ficam disponives no modulo q estamos criando

			depois ela cria im componente para utilizamos no modulo novo
			vai na pasta em criamos o modulo e da um:
			ng g c nomme-componente 
			cria a pasta do domponente com os arquivos do modulo e atualizou o modulo raiz
				lembrar de apagar a interface e as execuções dentro da classe
			nao queremos o cursosComopent declarado no modulo raiz, e sim no feature module
				apagamos do app.module
					apaga no import la em cima e no declarations

				depois temos que colocar o template criado na wiew do projeto
					primeiro passo: pega o nome do template na classe (selector)
					coloca na wiew do projeto
					atualiza
					vai dar ban, pq o templete ta na pasta q contem o modulo e o componente
					a wiwe do projeto ano encherga
					pra isso fazemos o seguinte
						no feature module damos um export para q a aplicação veja o modulo q esta na pasta 
					depois de exportar, precisamos ir no modulo raiz e importar o modulo q estamos criando.
						lembrar q no raiz, importamos o MODULO NOVO, e nao o componente novo

					o selector de um componente nao precisa ser escrito apenas na wiew do projeto
					se o projeto tem 5 componentes, eu posso pegar o seletor do componente 4 e escrever dentoro do template de outro componente.
					se dentro da pasta do componente 3, criarmos um componente, o componente-detalhe:
						o angular ja add o componente novo ao modulo
						mas e quisermos  q o template do componente detalhe seja visivel pela wiew do projeto, tessmo q colocar ele no exports 
							assim trabalhamos a ideia de componentes privados e componentes publicos

				na verdade, qd criamos um modulo e um componente, o que aocntece é o seguinte:
					o componente e o modulo novo tem o mesmo comportamento q componentes quaisquer e o app.module
					tipo, quando criamos apenas um componente, avisamos o app module
					quando criamos um modulo novo, e um componente	
						1 - avisamos o modulo novo da existencia do componente
						2 - avisamos o app module do modulo novo
						lembrar:
							no modulo novo definimos se os componntes sao publicos ou privados
							lá no exports	
							se colocarmos no exports, o componente fica publico
							se deixarmos apenas no declarations, fica privado


===============================================================================
aula 06
=========
	templates/wiews

	explica o q é templates
	fala dos seletores q podem ser criados nos metofdos

	aula de templates vou fazer no projeto transpilers
		tem modulos, componente solto e modulo detalhe
		no componente solto mais especificamente


		como faz p passar variavel p template - interpolação

		o angular cria um template html e aponta no componente,
		mas tb da pra criar templates no componente, com as crases.
		tem se como boas praticas trabalhar com templates inline (no componente) se o HTML tiver no maximo 3 linha
		smais do q isso ´reconedado q se crie um template e ponte no conmponente


===============================================================================
aula 07
=========
	Injeções e dependencias

	Serviços:
		nao é boa pratica colocar as requisições e "comunicaççao" com o servidor no componente.
		no componente colocamos apenas o q os usuarios podem ter acesso
		para comunicar com servidor criamos uma classe de serviço
		vou criar serviços no projeto tres pra nao ter q criar outro projeto

	me parece que é onde começa a pegar a orientação
		um serviço parece uma model
		ela que busca as informações
		o componente trata - controler
		e a wiew exibe - wiew

		Na real isso pode ser relacionado até com uma strucut
			ali ficam as infos 
			da pra pegar as listas do luan p treinar
			fazer alguns para fixar

	para criar uma classe de servico:
		pode serna mao
			create file, .......
			depois do arquivo criado, colocar o "esqueleto"
				imports, classe, metodo, .....
		pode ser via terminal
			o angular cli ja cria o esqueleto

		fazer alguns via terminal p fixar o passo a passo e a logica, 
		mas depois fazeer uns na mao p fixar os imports e estrutura do arquivo

		Fazer via bash:
			ng g s nome-do-servico	
				se fizermos assim o angular cli cria o serviço na pas app
				nao é o melhor nogocio
				o bom é criar na pasta do componente
				entao fazemos:
			ng g s nome-pasta-componente/nome-servico
			vou trabalhar no componente solto, pq ja tem o tratamento de algumas informações e tb tem interações com a wiew
			o angular cli cria dois arquivos
				um de teste
				e o outro, que é a classe de serviço

	existem duas maneiras de se chamar (instanciar na real) as classes de serviços qd estamos no componente.
	Uma é a manual, mas pode dar ban com http	
		ver como é a norml, e qual é o ban
		se der, fazer lagumas vezes para fixar
			O ban q pode dar é q alem de instanciarmos a classe de serviço, 
			tb teriamos q instanciar o http 
			o httm é um objeto do angular

			No componente:
				importa a classe la em cime
				cria uma instancia da classe de servico no construtor
				dentro do construtor trabalha chamando os metodos da classe de servico

			outra é via injeção de dependencias
				injeção de dependencia é fazer o angular instanciar autometicamente a classe p nos
				assim ele lida com o http
				assim agente utiliza a instancia, se ter que instanciar
				no angular agente faz isso com o decorator @injectable()
					assim nos fazemos com que a classe de servico seja "injetada" em outra
				no angular se trabalha com injeção de dependencia no construttor

				alem de fazer a injeção no serviço e no construtor,
				tb precisamos avisar o modulo da classe de serviço
					avisar q ela é um provider
					como a pasta componente solto nao tem modulo,
					botei no app module

				ver como é
				fazer algumas vezes para fixar

				
===============================================================================
aula 08
=========
	plugins

===============================================================================
aula 09
=========
	property binding	
	no projeto 6
	<img src={{ url }} - interpolação
	<img [src]=url - property binding
		é uma meniera mais pratica de colocar variavel nas propriedades html

===============================================================================
aula 10
=========
	class e style binding
		sao maneiras de serabalhar com databinding 
			da p usar p manipular o dom por exemplo.
		
		tipo, o databidinng nao servo só p tratar variaveis
		é um recurso
		e pode ser utilizado de varias maneiras
		p isso criei um componente no projeto 6, o func 3

		ela tb mostra como importar o bootstrap pro angular

		é a aula do select com bg colorido - projeto 6
	

===============================================================================
aula 11
=========
	event binding
	segui no projeto 6, pq pelo visto a aula 11 é continuação da 9 e 10
	no prpperty binding se usa colchetes - [srcr]
	no event binding se usa parenteses - (click)


























		
		
		
	

					
					
					
					
					
					
					
					
					
					
					