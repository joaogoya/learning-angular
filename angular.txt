===============================================================================
aula 01
=========
	playlist da loiane no youtube - https://www.youtube.com/watch?v=tPOMG0D57S0&list=PLGxZ4Rq3BOBoSRcKWEdQACbUCNWLczg2G

	apresentação
	
	componentes e templates
	data binding
	diretivas e serviços
	formularios
	roteamentos
	integração com servidor
	crud
	
	angular.io - documentação
	parceria google e microsoft
		google mantem, mas foi escrito em typescript(ms)
	
	open source
		github.com/angular
		
	overview
		compnente:
			é a view
			encapsula
				templates
				metadata - processamento de classes
				dado a ser mostrado na tela - databinding
				comportamento da view
				
			angular 2 é oriantado a componetes
				um componente pode ser divido em componetnte menores
					um componete de lista de posts pode ser dividido em varios posts, onde cada post é um componente	
					"quebrar" as coias em componentes faz com que fique ais facil de testar.

		Serviçoes
			Um componente pode se comunicar com o back end.
			qq linguagem. php, C#, c++,...
			o componete (front) pode falar com o back
			nao é boa pretica colocar regras de negocio nos componentes
			para isso existem os SERVIÇOS. São eles que fazem o meio campo entre p front e o back. É ali que ficam as regras de negocio
			Os servços tb podem ser injetados em outras classes, para isso se usa a INJEÇÃO DE DEPENDENCIAS do angular. Vai ter uma aula só p isso
			
		Router:
			Uma aplicação tem varias paginas
			o angular trabalha com o conceito de SPA - Single page aplication
			Uma pagina pode ter telas diferentes
			O router faz a navegação entre uma tela e outras
			
		Diretivas:
			Manipula o DOM
			os componentes tb manipula o dom, mas nao foram feitos p isso
			a diretiva sim.
		
	Repositorio do curso:
		github.com/loiane/curso-angular2
		Loiane.training
		



===============================================================================
aula 02
=========
	ambiente
	
	instalar o node
		tem q instalar pe nesse ponto é tipo grunt
		o angular trabalha com dependencias, e grunt com plugins
		
	no prompt/bash instalat o angular-cli
		provavelmente na pasta do projeto
		depois do angular-cli, é que chamamos as dependencias
		tem que ter um packdge json
		
	instalar typescript	
		depois de instalar o node
		npm install -g typescript 
		
		pq typescript e nao o js puto
			è possivel utilizar o ECMAscrpit2015, porem a maioria dos exemplos, a proria dpcumentação estão em typescrit
			o proprio angular foi escrito em typescript
	
	Instalar o angular@cli
		npm install -g@angular/cli	
			antenção, pq é barra no final, e nao hifem
			
		github.com/angular/angular-cli
		
		
	e tb vai precisar de editor de texto 
		sublime, notepad++, vs code,....
			vs code ja suporta typescripot (ts)
			sublime - tem plugins
			
			vs code	
				dar um scrool q tem as base, depois dos plugins
				https://code.visualstudio.com/docs?start=true
				
				https://code.visualstudio.com/docs/getstarted/introvideos 	 	
		
		
		
===============================================================================
aula 03
=========		
	primeiras aplicações
	no bash, dar um ng new nome-da-pasta
		o angular cria a pasta do projeto, com todos os componentes e todas as dependencias
		Sobre o nome da pasta:
			nao pode ter underline na frente, tem q ser uma letra
			tipo, _projeto01 ta errado, tem underline
		
		ela tem uma aula que explica o qq é cada arquivo que o angular cria 
			é aula 21

		vamos trabalhar em src/app 

		antes de inciar, vamos ver o que está sendo exibido no browser
			vai no bash, pasta q o angular criou, e da um ng serve
			assim o angular vai da um build no projeto e gera uma url pra acessar via browsar

		saida do dado do componente para a wiew se chama interpolação
			no componete tem um titlt = lorem
			na wiew tem um {{title}}
			Isso é uma interpolação

		criar novo componete:
			primeiro vai ser manualmente, para termos um passo a passo.
			mas tem como fazer via angular
			o passo a passo tb serve pra gente ser apresentado as boas praticas e patrodes de projeto do angular

			Manual, passo a passo:
				vai na pasta do projeto, em src/app cria uma nova pasta - primeiro-componente
				separado por hifen
				dentro da pasta cria um file
				meu-primeiro.component.ts
				dentro desse file:
					criamos a calsse primiroCompnent{}
					dai precisamos avisar o compilador q a classe é um componente
						@Component({})
						mas precismos importar a classe q permite usar o @component
						pra isso importa da biblioteca q o angular instalou no projeto (node modules)
						import {Component} from ´@angular/core´ 
						depois, precisamos passar os metadados, dentro do @component({
							metadados aqui
							selector e template
						})
						precisamos exportar a classe, para aplicação enxergar

				depois precisamos avisar a aplicação ad existencia dessa classe	
					no arquivo app.modules, no @moudules passamos a classe
					depois, la em cima, damos um import na classe.
					

			via bash, angular cli:
				ctrl+c p parar o ng serve
				ng g c nome do componente 
					onde a letra G é para gerar e a letra C é pra ser um componente 
					ng g c segundo-componente 

					o angular cra uma interface
						on init, e algumas coisas dentro da classe
						por enquanto isos nao vai ser preciso. Apagar. 

===============================================================================
aula 04
=========
	typescript
	cria uma pasta na pasta src/app
	dentro dessa pasta cria um file .ts
		criar codigos em js e comparar com ECMA e TS

		via bash, vai na pasta que foi criada, no caso aqui, é a pasta primeiro-typescript e da um tsc main.ts
		isso faz o ts compilar o arquivo 
		um arquivo .js é criado

		ela recomenda o site es6-features.org

		apresenta variaveis
		apresenta uma function norml
		apresenta uma arrow function, que é ECMA
			apaga a palavra function, fica o valor e uma seta
			numeros.map(valor =>)
			depois vem o que a function executa
			numeros.map(valor => {do sonthing;})
			quando o bloco de execução for só uma linha, nao precisa das chaves, nem do ponto e virgula dento delas, só o de fra do parenteses
			numeros.map(valor => do sonthing);
			tb nao precisa o retrn
			Para trabalhar com a ECMA precisa de um transpiler
				uns dos transpilers mais populares que existem é o babel
				mas o ts tem um transpiler nativo
				ele gera js nativo apartir do ECMA qd o ts compila
			com ECMA fica mais simples de declarr clasees, por exemplo.
				compila e o ts gera todo o codigo para a classe ter a sintaxe de js nativo

		ela explica pq o ts é melhor que o babel p transpilar
			1 - o babel ainda nao transpila decoratos, o ts ja
			2 - com ts temos como tipar as variaveis	
				o js nativo nao trabalha com tipos de dados
				tipo, criamos uma var numer = 4.
				com js nativo podemos escrever: numero = "lorem";
				um int estaria recebendo uma string
				de novo, com js nativo da. Ele nao trabalha com tipagem de dados.
				Mas com ts podemos tipar, e trabalhar com tipos e dados diferentes.
				Com babel tb nao da para trablahr com tipos de dados
		Ela recomenda olhar o curso de java basico, a parte de orientação aobjetos
			classes e atributos
			modificadores proivate 
			getters e setters 
			variaveis e metodos estaticos
			interfaces

===============================================================================
aula 05
=========
	Modulos
	qd agente cria um projeto com angular, ele ja cria um modulo. O app.modules
		esse é o modulo raiz da aplicação.
		ela apresenta o moudulo
			no final tem o export class
			depois da class, vem o decorator
				@alguma-coisa
				como é um decorator, tem q ter o import dele la no topo
				todos os decorators vem do @angular/core
			alem do decorator, tem outros Modulos  
				cada um tem uma função, e é importado de algum lugar
				nao necessariamente o @angular/core
					browser module - prepara a app p ser rodade em browser
					formsModule - ele é importante p databing e trabalhar com formularios
					http module - utilizado p fazer as requisições ajax
					Com o nivel de codigo q vamos trabalhar no inicio do curso, da p tirar o http module e o forms module, comentando as linhas
			Depois vem os metadados dentro do decorator
				declarations
					aqui declaramos toso os componentes, diretivas e pipes q vamos utilizar nesse modulo 
				imports:
					outros modulos que agente quer utilizar nesse modulo aqui
					por exemplo, se agente fizerm um import de algum modulo la em cima (tipo htpp), a gente precisa declarar o modulo aqui no metadados, atraves do import
				Providers
					é onde vao os serviços
					assim os serviços ficam disponiveis para os componentes declarados no modulo
				bootstrap
					existe apenas no mudolo raiz da app
					bootstrap á o componente que vai servisr de container para outros.
						o angular trabalha com SPA	
							single page aplication
						o botstrao aaponta qual é o componente "inicial", "principal" da aplicação
							é nesse componente q se configura as rotas 
							declara ou chama o menu da app 
			O angular trabalha com criação de modulos pq seficassemos declarando tudo nesse modulo 
				ele ficaria enorme
			os novos modulos sao chamados de features modules (modulos de funcinaliodades)
			para criar um modulo é via bash
			ng g m nome-do-modulo
			ng g m cursos
			
			depois ela apresenta as difrenças entre o modulo raiz e um feature modulo
				existem varas diferenças, mas oq importa é o CONMOM modules que o fetare modulo importa
				ele contem as diretivas e os pipes mais comuns
				Assim todas essas diretivas e pipes ficam disponives no modulo q estamos criando

			depois ela cria im componente para utilizamos no modulo novo
			vai na pasta em criamos o modulo e da um:
			ng g c nomme-componente 
			cria a pasta do domponente com os arquivos do modulo e atualizou o modulo raiz
				lembrar de apagar a interface e as execuções dentro da classe
			nao queremos o cursosComopent declarado no modulo raiz, e sim no feature module
				apagamos do app.module
					apaga no import la em cima e no declarations

				depois temos que colocar o template criado na wiew do projeto
					primeiro passo: pega o nome do template na classe (selector)
					coloca na wiew do projeto
					atualiza
					vai dar ban, pq o templete ta na pasta q contem o modulo e o componente
					a wiwe do projeto ano encherga
					pra isso fazemos o seguinte
						no feature module damos um export para q a aplicação veja o modulo q esta na pasta 
					depois de exportar, precisamos ir no modulo raiz e importar o modulo q estamos criando.
						lembrar q no raiz, importamos o MODULO NOVO, e nao o componente novo

					o selector de um componente nao precisa ser escrito apenas na wiew do projeto
					se o projeto tem 5 componentes, eu posso pegar o seletor do componente 4 e escrever dentoro do template de outro componente.
					se dentro da pasta do componente 3, criarmos um componente, o componente-detalhe:
						o angular ja add o componente novo ao modulo
						mas e quisermos  q o template do componente detalhe seja visivel pela wiew do projeto, tessmo q colocar ele no exports 
							assim trabalhamos a ideia de componentes privados e componentes publicos

				na verdade, qd criamos um modulo e um componente, o que aocntece é o seguinte:
					o componente e o modulo novo tem o mesmo comportamento q componentes quaisquer e o app.module
					tipo, quando criamos apenas um componente, avisamos o app module
					quando criamos um modulo novo, e um componente	
						1 - avisamos o modulo novo da existencia do componente
						2 - avisamos o app module do modulo novo
						lembrar:
							no modulo novo definimos se os componntes sao publicos ou privados
							lá no exports	
							se colocarmos no exports, o componente fica publico
							se deixarmos apenas no declarations, fica privado


===============================================================================
aula 06
=========
	templates/wiews

	explica o q é templates
	fala dos seletores q podem ser criados nos metofdos

	aula de templates vou fazer no projeto transpilers
		tem modulos, componente solto e modulo detalhe
		no componente solto mais especificamente

		como faz p passar variavel p template - interpolação

		o angular cria um template html e aponta no componente,
		mas tb da pra criar templates no componente, com as crases.
		tem se como boas praticas trabalhar com templates inline (no componente) se o HTML tiver no maximo 3 linha
		smais do q isso ´reconedado q se crie um template e ponte no conmponente


===============================================================================
aula 07
=========
	Injeções e dependencias

	Serviços:
		nao é boa pratica colocar as requisições e "comunicaççao" com o servidor no componente.
		no componente colocamos apenas o q os usuarios podem ter acesso
		para comunicar com servidor criamos uma classe de serviço
		vou criar serviços no projeto tres pra nao ter q criar outro projeto

	me parece que é onde começa a pegar a orientação
		um serviço parece uma model
		ela que busca as informações
		o componente trata - controler
		e a wiew exibe - wiew

		Na real isso pode ser relacionado até com uma strucut
			ali ficam as infos 
			da pra pegar as listas do luan p treinar
			fazer alguns para fixar

	para criar uma classe de servico:
		pode serna mao
			
		pode ser via terminal
			o angular cli ja cria o esqueletocreate file, .......
			depois do arquivo criado, colocar o "esqueleto"
				imports, classe, metodo, .....

		fazer alguns via terminal p fixar o passo a passo e a logica

		Fazer via bash:
			ng g s nome-do-servico	
				se fizermos assim o angular cli cria o serviço na pas app
				nao é o melhor nogocio
				o bom é criar na pasta do componente
				entao fazemos:
			ng g s nome-pasta-componente/nome-servico
			vou trabalhar no componente solto, pq ja tem o tratamento de algumas informações e tb tem interações com a wiew
			o angular cli cria dois arquivos
				um de teste
				e o outro, que é a classe de serviço

	existem duas maneiras de se chamar (instanciar na real) as classes de serviços qd estamos no componente.
	Uma é a manual, mas pode dar ban com http	
		ver como é a norml, e qual é o ban
		se der, fazer lagumas vezes para fixar
			O ban q pode dar é q alem de instanciarmos a classe de serviço, 
			tb teriamos q instanciar o http 
			o httm é um objeto do angular

			No componente:
				importa a classe la em cime
				cria uma instancia da classe de servico no construtor
				dentro do construtor trabalha chamando os metodos da classe de servico

			outra é via injeção de dependencias
				injeção de dependencia é fazer o angular instanciar autometicamente a classe p nos
				assim ele lida com o http
				assim agente utiliza a instancia, se ter que instanciar
				no angular agente faz isso com o decorator @injectable()
					assim nos fazemos com que a classe de servico seja "injetada" em outra
				no angular se trabalha com injeção de dependencia no construttor

				alem de fazer a injeção no serviço e no construtor,
				tb precisamos avisar o modulo da classe de serviço
					avisar q ela é um provider
					como a pasta componente solto nao tem modulo,
					botei no app module

				ver como é
				fazer algumas vezes para fixar

				
===============================================================================
aula 08
=========
	plugins

===============================================================================
aula 09
=========
	property binding	
	no projeto 6
	<img src={{ url }} - interpolação
	<img [src]=url - property binding
		é uma meniera mais pratica de colocar variavel nas propriedades html

===============================================================================
aula 10
=========
	class e style binding
		sao maneiras de serabalhar com databinding 
			da p usar p manipular o dom por exemplo.
		
		tipo, o databidinng nao servo só p tratar variaveis
		é um recurso
		e pode ser utilizado de varias maneiras
		p isso criei um componente no projeto 6, o func 3

		ela tb mostra como importar o bootstrap pro angular

		é a aula do select com bg colorido - projeto 6
	

===============================================================================
aula 11
=========
	event binding
	segui no projeto 6, pq pelo visto a aula 11 é continuação da 9 e 10
	no prpperty binding se usa colchetes - [srcr]
	no event binding se usa parenteses - (click)

	o property é usando para mandarinformações do domponente para o template
	o event é usado para mandar informaççoes do template para o componente

	e na aula 12 ela apresenta o two away data binding
		faz as duas coias ao mesmo tempo
		vai do template pro componente e do componente pro template
		essa aula fiz no cad-cli
	

===============================================================================
aula 12
=========

	two away data binding
	pra trabalhar com ngModel tem q importar o FormsModule no app module
		import { FormsModule } from '@angular/forms';

				[...]

				@NgModule({
				imports: [
					[...]
					FormsModule
				],
				[...]
				})



===============================================================================
aula 13
=========
	reutilização de componentes

	cria um componente novo
	nos vamos usar o html do coponente novo (o reuso) dentro do  html do cad-cli
	primeiro veremos como fazemos p passar informações do cad cli para o componente reuso
	
	é usado para "divir" o codigo
		por exemplo, se temos um objeto carro
		podemos ter um componente roda 
			com todas as informações e html da roda
		depois podemos ter um componente motor
			com tudo que for relativo ao motor 
		e assim sucessivamente

	pra praticar isso vou criar o projeto carro
		as informações de roda estão todas no mesmo componente.
	
	fiz os componentes porta, e radio pra preticar isso


===============================================================================
aula 14
=========		
	output propriet
		projeto carro - roda foi a aula 13
		motor vai ser a aula 14

		emitir eventos 
		
		fazer um evento no componente filho de uma meneira q o componete pai possa capturar e tb possa 
		desenvolver alguma logica em cima
		
===============================================================================
aula 15
=========		
	ciclo de vida dos componentes

	o angular tem varios eventos "defaullt", como o onInit
	essa aula ela apreseta eles
	pra essa aula vou criar um novo projeto, o ciclo

===============================================================================
aula 16
=========	
	acesso ao dom e ao template com view child
	projeto carro
	uma outra maneira de referenciar elementos do html 
	ViewChild pelo que eu entendi não é, necessariamente, para ver um componente filho
	mas sim, uma maneira de o componente ver o seu proprio html

===============================================================================
aula 17
=========
	angular cli
	coisas q ela ja havia explicado na aula 1


===============================================================================
aula 18
=========
	como criar componentes e classe de servico
	coisas q ela tb ja havia explicado na aula 1

===============================================================================
aula 19
=========
	usando less, sass e stylus
		qd for criar o projeto, avisa q vai usar pre processador, por parametro
		p criar um projeto é:
			ng new nome-do-projeto
		cmo pre-processador:
			ng new nome-do-projeto --less 

		tb da p setar o css de projetos existentes, para "virarem" projetos com pre procssadores
			ng set defaults.styleExt less

		na real os projetos nao viram projetos com pre processadores
			os componentes que ja existem continuam como css
			os novos passam a ser com pre processador escolhido.
			nos ja existentes, da pra mudar a extenção na mao


===============================================================================
aula 20
=========
	ng lint, ng test e ng e2e

	ngLint
		veio do java, o jsLint
		percorre o codigo e procura por erros de sintaxe, tipo dois ponto virgula ;;
		tb vavalia se o codigo ta dentro dos padroes de boas praticas
		executamos na pasta do projeto, e nao nas pastas dos componentes

	ng test
		usa o jasmin, que é uma biblioteca de BDD - testes orientados a comportamentos
		fala mt sobre testes 

	ng e2e	
		testes de integração
		entirety to entirety

===============================================================================
aula 21
=========
	angular cli
	exolica tudo q o cli cira qd criamos um projeto


===============================================================================
aula 22
=========
	gerando build de projeto

	tem duas builds
		a buld de desenvolvimento
		e a build de producao

		dev é ng build

		prod é ng build --proj

	ad aus builds geram os mesmos arquivos, a diferença é q na build de prod ainda nao ta minificado, anda tem as variaveis,...
	e na prod é tudo compilado e minificado
	a buid de dev é mais legivel para humanos

	http serve	
		é um servidor do node
		https://www.npmjs.com/package/http-server 	
		npm install http-server -g

		com o servidor instalado, depois de dar a build, da um http serve e versao de produção vai ser servida no browser

===============================================================================
aula 23
=========
	instalaçoa de bibliotecas externas
	bootstrap, jquery, materialize css, ....

	bootstrap:
		vai na pasta do projeto e da um $ npm install bootstrap@3 jquery --save
		depois q a instalação terminar, da p ir no package.json p ver se foi instalado
		o bootstrap ja instala o jquery, pq precisa dele p funcionar
		o bootstrap tb instala o teter 
		depois temos q avisar o angular o endereço dos js e css das 3 libs
		no arquivo angular cli .json
		
		https://loiane.com/2017/08/how-to-add-bootstrap-to-an-angular-cli-project/
		
		appteste 5



===============================================================================
aula 24
=========

	diretivas
		diretivas estruturais
			modificam o dom (HTML)
				if, for switch, ...
		diretivas de atributos	
			interagem coo html, mas nao modificam
				ng class, ng style, ...
			interagem com html pelos atributos


===============================================================================
aula 25
=========
	diretiva ng if

===============================================================================
aula 26
=========
	diretiva ng switch

===============================================================================
aula 27
=========
	diretiva ng for


===============================================================================
aula 28
=========
	<template> e uso do *


===============================================================================
aula 29
=========
	diretiva ng class

===============================================================================
aula 30
=========
	diretiva ng style

===============================================================================
aula 31
=========
	Operador ?

===============================================================================
aula 32
=========
	ng content

===============================================================================
aula 33
=========
	criando diretivas
	elementref e  renderer
	
	é um componente sem template
	ajuda a manipular o dom

		diretivas estruturais	
			manipulam o dom
				if, for, switch. ......
		
		diretivas de atributos
			interegem com o dom, sem manipula-lo
			ngClass, ngStyle,....

		E a diretiva q vai ser criada é de atributo, vai mudar a cor de um elementos

		ng g d nome-da-diretiva 
		
		qd criamos componentes o angular cli ja cria:
			o componente.ts
			o template
			o css
			o arquivo de teste
			e ja faz todos os paontamentos internos e com o modulo.

		diretivas normalmente sao compartilhadas por toda a aplicação
		o angular cli ja cria, qd criamos um projeto, um diretorio chamado de shared
		ali ficam todos os arquivos compartilhados por todos os componentes
		é boa pratica criar as diretivas ali
		ng g d shared/nome-da-diretiva

		o angular cli ja aponta adiretiva no modulo

		a comunidade angular pede p nao utilizar o elementRef, pq cria pontos de vulnerabilidade para ataques xxs
		é melhor utilizar o renderer e passar o elemnt ref por ele

===============================================================================
aula 34
=========
	diretivas
		hostListern
		hostbinder

		escutar eventos em elementos cm diretivas customizadas
			hostListern
		
		sem hosbiding

			no construtor faz a injeção de dependecia da ref e da render, instanciando objetos

			importa anhostlistern p escuta os eventos do template
			passa o evento q quer escutar e cria o nomedo do metodo
			
			dentro do metodo criado nas host, utiliza o render p dizer o qq tem q acontecer no template com o elemento referenciado
				p isso tem q importara a elementref e a render
			
		com hosbiding
			importa a host biding e a host listernen, nao precisa ref e render
			diz qual a propriedade com a binding vai ser editada e cria uma variavel p isso
			nas hostlistern atribui valor para a variavel



===============================================================================
aula 35
=========
	diretivas de @input e property biding

	inicia a aula copiando o conteudo da aula passada
	pelo visto inicia a partir de um hostbiding

===============================================================================
aula 36
=========
	diretivas de estruturas
	diretivas q modificam a estrutura do dom

	importa templateRef
	importa viewContainerRef
	faz a injeção de dependencia deles no construtor
	
	importa o @Input, e é ele q faz a parada
		normalmente qd trabalhamos com @Input, declaramos uma variavel
		aqui, declaramos um metodo passando alguma coisa, e o metodo manipula os elementos
		o container, com o metodo createEmbeddedView passa o template


===============================================================================
aula 37
=========
	servicos
	buscar e mandar dados p banco
	apresentação e utilização


===============================================================================
aula 37
=========	
	serviços
	introdução

===============================================================================
aula 38
=========
	serviços
	exemplo parecido com o q ela ja tinha dado no inicio do curso

===============================================================================
aula 39
=========
	serviços
	injeção de dependencia

===============================================================================
aula 40
=========
	serviços
	single injectio e varias instancias
	dois componentes utilizam o mesmo servico
		por exemplo
		componente um tem uma classe de servico, a servicoUm

		se eu criar algum outor componente, eu posso importar essa classe	
			import {nomeDaClasse} from '../caminho/da/pasta';
			é só tratar o from p apntar pra pasta do servico um 

		da p criar um modulo p cada componente
			assim, os dois componentes trabalham com a mesma classe de servico, mas cada um com seu modulo

		no modulo, temos q informar q a classe de serviço é um provider.
		tb da pra fazer isso no componente
			@Component({
				selector: 'app-servico-dois',
				templateUrl: './servico-dois.component.html',
				styleUrls: ['./servico-dois.component.css']
				providers: [NomeClasseServico]
			})
			assim a classe servico é instanciada varias vezes
			uma no modulo (seja o appModule ou algum modulo de servico), e outra cada vez e aparece em algum cmponente

			se fizermos os imports sempre nos modulo, o servico é instaciado apenas uma vez
			
			qd fazemos imports via modules, as alterações sao aplicadas á todos os componentes e views q importam o servico
			qd fazemos o import no @component do modulo, as alterações sao aplicadas apenas aquele componente,
			pq estamos mexendo só na instancia dele


			os componentes servicoUm e servicoDois, estao cada um trabalhando com sua classe de servico

			nos componetes servico-tres e servico-4 eu vou utilizar, para os dois, a classe de servico do 
			componente servico-3
			e vou ver como se trabalha uma instancia emais de uma instancia para a mesma classe de servico
			o 3, q tem a classe de servico, busca as infos e exibe
			
			os componetes 3 e 4 estao trabalhando com a mesma classe de servico e com a mesma instancia
			os componentes 5 e 6 vao trabalhar com a mesma classe de servico, mas com instancias diferentes

===============================================================================
aula 41
=========
	broadcast de eventos
	qd um evento for disparado em um componete, fazer outro ouvir
	o @input e @output serveme para comunicar componentes pai com componentes filhos
	o que queremos e comunicar componentes q nao tenham relação nenhuma

	nesse caso vamos trabalhar com dois componentes q tem a mesma classe de servico, mas cada um com sua instancia

	e vamos fazer o metodo em um, disparar um metodo em outro

	pra isso vou criar os componentes 7 e 8
	o componente 8 tem q ta no modulo do 7

===============================================================================
aula 42
=========
	Injetar servico dentro de outro serviço
	injetar o serviço A no servico B
	
	Da mesma maneira q fazemos p chamar um serv em um componente

	faz o import la em cima 
	instancia no construtor
	dae, assim, no serv B a gente tem uma instancia do erv A


===============================================================================
aula 43
=========
	Pipes
	pipes sao filtros de data, moeda, .....
	eles "arrumam" os valores
	criei um projeto novo, o proj-pipe

===============================================================================
aula 44
=========
	criando um pipe
	ng g p nome-do-pipe

===============================================================================
aula 45
=========
	aplicando locale nos pipes
	no modlo, em provider da um:
		providder: LOCALE_ID
		lfaz parte do angular core, entao tem q importar la em cima
	fiz igual ao da loianee nao rolou
	tive que importar uma galera
		import { LOCALE_ID } from '@angular/core';
		import { registerLocaleData } from '@angular/common';
		import localePt from '@angular/common/locales/pt'; 
		registerLocaleData(localePt, 'pt-BR'); 


===============================================================================
aula 46 e 47
=============
	Pipes puros vs pipes impuros

	A pure pipe is only called when Angular detects a change in the value or the parameters passed to a pipe. 
	An impure pipe is called for every change detection cycle no matter whether the value or parameters changes.

===============================================================================
aula 48
========
	pipe assincrono


===============================================================================
aula 49
========
	rotas
	ela instala uma outra versao do materialize
	primmeiro componente é p testar o materialize
	na 49 ela explica qual é a das single pages aplications


===============================================================================
aula 50
=========
	rota simples
	criamos um arquivo de rotas

===============================================================================
aula 51
=========
	rotas no template

===============================================================================
aula 52
=========
	css na rota ativa

===============================================================================
aula 53
=========
	definindo e extraindo parametros das rotas

===============================================================================
aula 54
=========
	Escutando mudanças nos parâmetros de roteamento


===============================================================================
aula 55
========= 	
	rotas imperativas

===============================================================================
aula 56
========= 
	definindo e extraindo parametros da url

	sobre rotas até aqui:
		no app routing cria uma cosntante que recebe um array de objetos
		cada objeto tem dois atributos
			path e o componente
		
		depois joga esse contante numa variavel que é exportada

		no app coloca essa variavel no imports:[] e faz o import da app route la em cima

===============================================================================
aula 57
========= 
	modulo de rotas
	aqui vai rolar um modulo p cada rota, aparentemente

	é praticamente igual, tem poucas diferenças
	mas é mais interessante pq com modulo agente exporta um modulo e nao uma constante 


===============================================================================
aula 58
========= 
	modulo de funcionalidade
	ela poe a pasta curso detalhe dentro d pasta cursos, ecria um modulo pra eles


===============================================================================
aula 59
========= 
	modulo de rotas de funcionalidade


===============================================================================
aula 60
========= 
	rotas filhas
	
































































		
		
		
	

					
					
					
					
					
					
					
					
					
					
					